{"version":3,"file":"smart-iframe.min.js","sources":["../src/core/ResourceCache.js","../src/utils/htmlParser.js","../src/core/Renderer.js","../src/core/SmartIframe.js","../src/web-components/SmartIframeElement.js","../src/index.js"],"sourcesContent":["/**\n * 资源缓存层 - 解决重复请求问题的核心模块\n */\nclass ResourceCache {\n  static cache = new Map();\n  static pendingRequests = new Map();\n  static maxCacheSize = 100; // 最大缓存数量\n  static maxAge = 30 * 60 * 1000; // 30分钟过期时间\n\n  /**\n   * 带缓存的资源获取\n   * @param {string} url - 资源URL\n   * @param {Object} options - 请求选项\n   * @returns {Promise<Object>} 缓存的资源对象\n   */\n  static async fetchWithCache(url, options = {}) {\n    const normalizedUrl = this.normalizeUrl(url);\n    \n    // 检查缓存\n    if (this.cache.has(normalizedUrl)) {\n      const cached = this.cache.get(normalizedUrl);\n      \n      // 检查是否过期\n      if (Date.now() - cached.timestamp < this.maxAge) {\n        console.log(`[SmartIframe] 使用缓存: ${normalizedUrl}`);\n        return cached;\n      } else {\n        // 删除过期缓存\n        this.cache.delete(normalizedUrl);\n      }\n    }\n\n    // 检查是否有正在进行的请求\n    if (this.pendingRequests.has(normalizedUrl)) {\n      console.log(`[SmartIframe] 等待正在进行的请求: ${normalizedUrl}`);\n      return await this.pendingRequests.get(normalizedUrl);\n    }\n\n    // 发起新请求\n    console.log(`[SmartIframe] 发起新请求: ${normalizedUrl}`);\n    const requestPromise = this.performRequest(normalizedUrl, options);\n    this.pendingRequests.set(normalizedUrl, requestPromise);\n\n    try {\n      const result = await requestPromise;\n      this.pendingRequests.delete(normalizedUrl);\n      \n      // 存入缓存\n      this.addToCache(normalizedUrl, result);\n      return result;\n    } catch (error) {\n      this.pendingRequests.delete(normalizedUrl);\n      throw error;\n    }\n  }\n\n  /**\n   * 执行实际的HTTP请求\n   * @param {string} url - 请求URL\n   * @param {Object} options - 请求选项\n   * @returns {Promise<Object>} 请求结果\n   */\n  static async performRequest(url, options) {\n    try {\n      const response = await fetch(url, {\n        mode: 'cors',\n        cache: 'default',\n        ...options\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const contentType = response.headers.get('content-type') || '';\n      let content;\n\n      if (contentType.includes('text/') || contentType.includes('application/javascript') || contentType.includes('application/json')) {\n        content = await response.text();\n      } else {\n        // 对于二进制资源，转换为blob URL\n        const blob = await response.blob();\n        content = URL.createObjectURL(blob);\n      }\n\n      return {\n        content,\n        contentType,\n        url,\n        timestamp: Date.now(),\n        size: content.length || 0\n      };\n    } catch (error) {\n      console.error(`[SmartIframe] 请求失败: ${url}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * URL标准化处理\n   * @param {string} url - 原始URL\n   * @returns {string} 标准化后的URL\n   */\n  static normalizeUrl(url) {\n    try {\n      const urlObj = new URL(url, window.location.href);\n      // 移除fragment，保留query参数\n      urlObj.hash = '';\n      return urlObj.toString();\n    } catch (error) {\n      console.warn(`[SmartIframe] URL标准化失败: ${url}`, error);\n      return url;\n    }\n  }\n\n  /**\n   * 添加到缓存\n   * @param {string} url - URL\n   * @param {Object} data - 缓存数据\n   */\n  static addToCache(url, data) {\n    // 检查缓存大小限制\n    if (this.cache.size >= this.maxCacheSize) {\n      // 删除最旧的缓存项\n      const oldestKey = this.cache.keys().next().value;\n      this.cache.delete(oldestKey);\n      console.log(`[SmartIframe] 删除最旧缓存: ${oldestKey}`);\n    }\n\n    this.cache.set(url, data);\n    console.log(`[SmartIframe] 缓存已保存: ${url} (${data.size} bytes)`);\n  }\n\n  /**\n   * 清除缓存\n   * @param {string} url - 可选的特定URL，不传则清除全部\n   */\n  static clearCache(url = null) {\n    if (url) {\n      const normalizedUrl = this.normalizeUrl(url);\n      this.cache.delete(normalizedUrl);\n      console.log(`[SmartIframe] 已清除缓存: ${normalizedUrl}`);\n    } else {\n      this.cache.clear();\n      console.log('[SmartIframe] 已清除全部缓存');\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   * @returns {Object} 缓存统计\n   */\n  static getCacheStats() {\n    const totalSize = Array.from(this.cache.values())\n      .reduce((sum, item) => sum + (item.size || 0), 0);\n    \n    return {\n      count: this.cache.size,\n      totalSize,\n      maxSize: this.maxCacheSize,\n      pendingRequests: this.pendingRequests.size\n    };\n  }\n\n  /**\n   * 预加载资源列表\n   * @param {Array<string>} urls - 要预加载的URL列表\n   * @returns {Promise<Array>} 预加载结果\n   */\n  static async preloadResources(urls) {\n    console.log(`[SmartIframe] 开始预加载 ${urls.length} 个资源`);\n    const promises = urls.map(url => \n      this.fetchWithCache(url).catch(error => {\n        console.warn(`[SmartIframe] 预加载失败: ${url}`, error);\n        return null;\n      })\n    );\n    \n    const results = await Promise.all(promises);\n    const successCount = results.filter(r => r !== null).length;\n    console.log(`[SmartIframe] 预加载完成: ${successCount}/${urls.length} 成功`);\n    \n    return results;\n  }\n}\n\nexport default ResourceCache; ","/**\n * HTML解析器 - 解析HTML并提取所有资源引用\n */\nclass HtmlParser {\n  /**\n   * 解析HTML内容，提取所有资源引用\n   * @param {string} html - HTML内容\n   * @param {string} baseUrl - 基础URL，用于解析相对路径\n   * @returns {Object} 解析结果\n   */\n  static parseHTML(html, baseUrl) {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    \n    const resources = {\n      stylesheets: [],\n      scripts: [],\n      images: [],\n      links: [],\n      other: []\n    };\n\n    // 提取CSS资源\n    this.extractStylesheets(doc, resources, baseUrl);\n    \n    // 提取JavaScript资源\n    this.extractScripts(doc, resources, baseUrl);\n    \n    // 提取图片资源\n    this.extractImages(doc, resources, baseUrl);\n    \n    // 提取其他链接资源\n    this.extractOtherLinks(doc, resources, baseUrl);\n\n    // 处理内联样式中的URL\n    this.extractInlineStyleUrls(doc, resources, baseUrl);\n\n    return {\n      document: doc,\n      resources,\n      allUrls: this.getAllUrls(resources)\n    };\n  }\n\n  /**\n   * 提取CSS样式表\n   */\n  static extractStylesheets(doc, resources, baseUrl) {\n    const links = doc.querySelectorAll('link[rel=\"stylesheet\"], link[rel=\"preload\"][as=\"style\"]');\n    \n    links.forEach(link => {\n      const href = link.getAttribute('href');\n      if (href) {\n        const absoluteUrl = this.resolveUrl(href, baseUrl);\n        resources.stylesheets.push({\n          element: link,\n          originalUrl: href,\n          absoluteUrl,\n          type: 'stylesheet'\n        });\n      }\n    });\n\n    // 提取style标签中的@import\n    const styleTags = doc.querySelectorAll('style');\n    styleTags.forEach(style => {\n      const content = style.textContent;\n      const importMatches = content.match(/@import\\s+(?:url\\()?[\"']?([^\"')]+)[\"']?\\)?[^;]*;/g);\n      \n      if (importMatches) {\n        importMatches.forEach(match => {\n          const urlMatch = match.match(/[\"']?([^\"')]+)[\"']?/);\n          if (urlMatch && urlMatch[1]) {\n            const absoluteUrl = this.resolveUrl(urlMatch[1], baseUrl);\n            resources.stylesheets.push({\n              element: style,\n              originalUrl: urlMatch[1],\n              absoluteUrl,\n              type: 'import',\n              parentStyle: style\n            });\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * 提取JavaScript脚本\n   */\n  static extractScripts(doc, resources, baseUrl) {\n    const scripts = doc.querySelectorAll('script[src]');\n    \n    scripts.forEach(script => {\n      const src = script.getAttribute('src');\n      if (src) {\n        const absoluteUrl = this.resolveUrl(src, baseUrl);\n        resources.scripts.push({\n          element: script,\n          originalUrl: src,\n          absoluteUrl,\n          type: 'script',\n          async: script.hasAttribute('async'),\n          defer: script.hasAttribute('defer'),\n          module: script.type === 'module'\n        });\n      }\n    });\n  }\n\n  /**\n   * 提取图片资源\n   */\n  static extractImages(doc, resources, baseUrl) {\n    const images = doc.querySelectorAll('img[src], img[data-src]');\n    \n    images.forEach(img => {\n      const src = img.getAttribute('src') || img.getAttribute('data-src');\n      if (src) {\n        const absoluteUrl = this.resolveUrl(src, baseUrl);\n        resources.images.push({\n          element: img,\n          originalUrl: src,\n          absoluteUrl,\n          type: 'image'\n        });\n      }\n\n      // 处理srcset\n      const srcset = img.getAttribute('srcset');\n      if (srcset) {\n        const srcsetUrls = this.parseSrcset(srcset, baseUrl);\n        srcsetUrls.forEach(url => {\n          resources.images.push({\n            element: img,\n            originalUrl: url.originalUrl,\n            absoluteUrl: url.absoluteUrl,\n            type: 'image-srcset'\n          });\n        });\n      }\n    });\n\n    // 处理背景图片\n    const elementsWithBg = doc.querySelectorAll('[style*=\"background\"]');\n    elementsWithBg.forEach(el => {\n      const style = el.getAttribute('style');\n      const bgUrls = this.extractBackgroundUrls(style, baseUrl);\n      bgUrls.forEach(url => {\n        resources.images.push({\n          element: el,\n          originalUrl: url.originalUrl,\n          absoluteUrl: url.absoluteUrl,\n          type: 'background-image'\n        });\n      });\n    });\n  }\n\n  /**\n   * 提取其他链接资源\n   */\n  static extractOtherLinks(doc, resources, baseUrl) {\n    const links = doc.querySelectorAll('link:not([rel=\"stylesheet\"]):not([rel=\"preload\"][as=\"style\"])');\n    \n    links.forEach(link => {\n      const href = link.getAttribute('href');\n      if (href) {\n        const absoluteUrl = this.resolveUrl(href, baseUrl);\n        const rel = link.getAttribute('rel') || 'unknown';\n        \n        resources.links.push({\n          element: link,\n          originalUrl: href,\n          absoluteUrl,\n          type: 'link',\n          rel\n        });\n      }\n    });\n\n    // 处理其他可能的资源引用\n    const otherElements = doc.querySelectorAll('source[src], track[src], embed[src], object[data]');\n    otherElements.forEach(el => {\n      const src = el.getAttribute('src') || el.getAttribute('data');\n      if (src) {\n        const absoluteUrl = this.resolveUrl(src, baseUrl);\n        resources.other.push({\n          element: el,\n          originalUrl: src,\n          absoluteUrl,\n          type: el.tagName.toLowerCase()\n        });\n      }\n    });\n  }\n\n  /**\n   * 提取内联样式中的URL\n   */\n  static extractInlineStyleUrls(doc, resources, baseUrl) {\n    const elementsWithStyle = doc.querySelectorAll('[style]');\n    \n    elementsWithStyle.forEach(el => {\n      const style = el.getAttribute('style');\n      const urls = this.extractUrlsFromCSS(style, baseUrl);\n      \n      urls.forEach(url => {\n        resources.other.push({\n          element: el,\n          originalUrl: url.originalUrl,\n          absoluteUrl: url.absoluteUrl,\n          type: 'inline-style'\n        });\n      });\n    });\n  }\n\n  /**\n   * 从CSS内容中提取URL\n   */\n  static extractUrlsFromCSS(cssContent, baseUrl) {\n    const urls = [];\n    const urlRegex = /url\\(\\s*[\"']?([^\"')]+)[\"']?\\s*\\)/g;\n    let match;\n\n    while ((match = urlRegex.exec(cssContent)) !== null) {\n      const originalUrl = match[1];\n      const absoluteUrl = this.resolveUrl(originalUrl, baseUrl);\n      urls.push({ originalUrl, absoluteUrl });\n    }\n\n    return urls;\n  }\n\n  /**\n   * 提取背景图片URL\n   */\n  static extractBackgroundUrls(styleContent, baseUrl) {\n    return this.extractUrlsFromCSS(styleContent, baseUrl);\n  }\n\n  /**\n   * 解析srcset属性\n   */\n  static parseSrcset(srcset, baseUrl) {\n    const urls = [];\n    const entries = srcset.split(',');\n    \n    entries.forEach(entry => {\n      const trimmed = entry.trim();\n      const parts = trimmed.split(/\\s+/);\n      if (parts.length > 0) {\n        const originalUrl = parts[0];\n        const absoluteUrl = this.resolveUrl(originalUrl, baseUrl);\n        urls.push({ originalUrl, absoluteUrl });\n      }\n    });\n\n    return urls;\n  }\n\n  /**\n   * 解析相对URL为绝对URL\n   */\n  static resolveUrl(url, baseUrl) {\n    try {\n      // 如果已经是绝对URL，直接返回\n      if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('//')) {\n        return url.startsWith('//') ? `https:${url}` : url;\n      }\n\n      // 如果是data URL或其他特殊协议，直接返回\n      if (url.startsWith('data:') || url.startsWith('blob:') || url.startsWith('javascript:')) {\n        return url;\n      }\n\n      // 解析相对URL\n      const base = new URL(baseUrl);\n      const resolved = new URL(url, base);\n      return resolved.toString();\n    } catch (error) {\n      console.warn(`[SmartIframe] URL解析失败: ${url} (base: ${baseUrl})`, error);\n      return url;\n    }\n  }\n\n  /**\n   * 获取所有资源URL列表\n   */\n  static getAllUrls(resources) {\n    const allUrls = [];\n    \n    Object.values(resources).forEach(resourceList => {\n      resourceList.forEach(resource => {\n        if (resource.absoluteUrl && !allUrls.includes(resource.absoluteUrl)) {\n          allUrls.push(resource.absoluteUrl);\n        }\n      });\n    });\n\n    return allUrls;\n  }\n\n  /**\n   * 重写HTML中的资源引用\n   * @param {Document} doc - DOM文档\n   * @param {Object} resourceMap - 资源映射表 {originalUrl: newUrl}\n   * @returns {string} 重写后的HTML\n   */\n  static rewriteResourceReferences(doc, resourceMap) {\n    // 重写link标签\n    doc.querySelectorAll('link[href]').forEach(link => {\n      const href = link.getAttribute('href');\n      const absoluteUrl = this.resolveUrl(href, window.location.href);\n      if (resourceMap[absoluteUrl]) {\n        link.setAttribute('href', resourceMap[absoluteUrl]);\n      }\n    });\n\n    // 重写script标签\n    doc.querySelectorAll('script[src]').forEach(script => {\n      const src = script.getAttribute('src');\n      const absoluteUrl = this.resolveUrl(src, window.location.href);\n      if (resourceMap[absoluteUrl]) {\n        script.setAttribute('src', resourceMap[absoluteUrl]);\n      }\n    });\n\n    // 重写img标签\n    doc.querySelectorAll('img[src]').forEach(img => {\n      const src = img.getAttribute('src');\n      const absoluteUrl = this.resolveUrl(src, window.location.href);\n      if (resourceMap[absoluteUrl]) {\n        img.setAttribute('src', resourceMap[absoluteUrl]);\n      }\n    });\n\n    // 重写style标签中的@import和url()\n    doc.querySelectorAll('style').forEach(style => {\n      let content = style.textContent;\n      \n      // 替换所有URL引用\n      content = content.replace(/url\\(\\s*[\"']?([^\"')]+)[\"']?\\s*\\)/g, (match, url) => {\n        const absoluteUrl = this.resolveUrl(url, window.location.href);\n        const newUrl = resourceMap[absoluteUrl] || url;\n        return match.replace(url, newUrl);\n      });\n\n      style.textContent = content;\n    });\n\n    return doc.documentElement.outerHTML;\n  }\n}\n\nexport default HtmlParser; ","import ResourceCache from './ResourceCache.js';\nimport HtmlParser from '../utils/htmlParser.js';\n\n/**\n * 渲染引擎 - 负责在Shadow DOM中渲染完整网页\n */\nclass Renderer {\n  constructor(container, options = {}) {\n    this.container = container;\n    this.options = {\n      sandbox: true,\n      loadImages: true,\n      loadScripts: true,\n      loadStyles: true,\n      ...options\n    };\n    \n    this.shadowRoot = null;\n    this.baseUrl = '';\n    this.resourceMap = new Map();\n    this.isRendered = false;\n  }\n\n  /**\n   * 渲染URL指定的网页\n   * @param {string} url - 要渲染的网页URL\n   * @returns {Promise<void>}\n   */\n  async renderUrl(url) {\n    try {\n      console.log(`[SmartIframe] 开始渲染: ${url}`);\n      this.baseUrl = url;\n\n      // 1. 获取HTML内容\n      const htmlResource = await ResourceCache.fetchWithCache(url);\n      \n      // 2. 解析HTML并提取资源\n      const parsed = HtmlParser.parseHTML(htmlResource.content, url);\n      \n      // 3. 预加载所有资源\n      if (parsed.allUrls.length > 0) {\n        await this.preloadResources(parsed.allUrls);\n      }\n\n      // 4. 创建Shadow DOM\n      this.createShadowRoot();\n\n      // 5. 处理CSS样式\n      await this.processStyles(parsed.resources.stylesheets);\n\n      // 6. 渲染HTML结构\n      this.renderHTML(parsed.document);\n\n      // 7. 处理JavaScript（如果启用）\n      if (this.options.loadScripts) {\n        await this.processScripts(parsed.resources.scripts);\n      }\n\n      // 8. 处理图片资源\n      if (this.options.loadImages) {\n        this.processImages(parsed.resources.images);\n      }\n\n      this.isRendered = true;\n      console.log(`[SmartIframe] 渲染完成: ${url}`);\n      \n      // 触发渲染完成事件\n      this.dispatchEvent('rendered', { url, resources: parsed.resources });\n\n    } catch (error) {\n      console.error(`[SmartIframe] 渲染失败: ${url}`, error);\n      this.dispatchEvent('error', { url, error });\n      throw error;\n    }\n  }\n\n  /**\n   * 创建Shadow DOM\n   */\n  createShadowRoot() {\n    if (this.shadowRoot) {\n      return;\n    }\n\n    // 检查容器是否已经有Shadow DOM\n    if (this.container.shadowRoot) {\n      this.shadowRoot = this.container.shadowRoot;\n      // 清空现有内容\n      this.shadowRoot.innerHTML = '';\n    } else {\n      this.shadowRoot = this.container.attachShadow({ \n        mode: 'closed',\n        delegatesFocus: false \n      });\n    }\n\n    // 添加基础样式重置\n    const resetStyle = document.createElement('style');\n    resetStyle.textContent = `\n      :host {\n        display: block;\n        width: 100%;\n        height: 100%;\n        overflow: auto;\n      }\n      \n      html, body {\n        margin: 0;\n        padding: 0;\n        width: 100%;\n        height: 100%;\n      }\n    `;\n    \n    this.shadowRoot.appendChild(resetStyle);\n  }\n\n  /**\n   * 预加载资源\n   * @param {Array<string>} urls - 资源URL列表\n   */\n  async preloadResources(urls) {\n    const filteredUrls = urls.filter(url => {\n      // 过滤掉不需要预加载的资源\n      return !url.startsWith('data:') && \n             !url.startsWith('blob:') && \n             !url.startsWith('javascript:');\n    });\n\n    if (filteredUrls.length > 0) {\n      await ResourceCache.preloadResources(filteredUrls);\n    }\n  }\n\n  /**\n   * 处理CSS样式\n   * @param {Array} stylesheets - CSS资源列表\n   */\n  async processStyles(stylesheets) {\n    if (!this.options.loadStyles) {\n      return;\n    }\n\n    for (const stylesheet of stylesheets) {\n      try {\n        if (stylesheet.type === 'stylesheet') {\n          const cssResource = await ResourceCache.fetchWithCache(stylesheet.absoluteUrl);\n          const processedCSS = await this.processCSSContent(cssResource.content, stylesheet.absoluteUrl);\n          \n          const style = document.createElement('style');\n          style.textContent = processedCSS;\n          this.shadowRoot.appendChild(style);\n          \n        } else if (stylesheet.type === 'import') {\n          // 处理@import\n          const cssResource = await ResourceCache.fetchWithCache(stylesheet.absoluteUrl);\n          const processedCSS = await this.processCSSContent(cssResource.content, stylesheet.absoluteUrl);\n          \n          // 替换原来的@import\n          const parentStyle = stylesheet.parentStyle;\n          if (parentStyle) {\n            let content = parentStyle.textContent;\n            content = content.replace(\n              new RegExp(`@import\\\\s+(?:url\\\\()?[\"']?${stylesheet.originalUrl.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}[\"']?\\\\)?[^;]*;`),\n              processedCSS\n            );\n            parentStyle.textContent = content;\n          }\n        }\n      } catch (error) {\n        console.warn(`[SmartIframe] CSS加载失败: ${stylesheet.absoluteUrl}`, error);\n      }\n    }\n  }\n\n  /**\n   * 处理CSS内容，解析其中的url()引用\n   * @param {string} cssContent - CSS内容\n   * @param {string} baseUrl - CSS文件的基础URL\n   * @returns {Promise<string>} 处理后的CSS内容\n   */\n  async processCSSContent(cssContent, baseUrl) {\n    // 提取CSS中的所有URL引用\n    const urlRegex = /url\\(\\s*[\"']?([^\"')]+)[\"']?\\s*\\)/g;\n    const urls = [];\n    let match;\n\n    while ((match = urlRegex.exec(cssContent)) !== null) {\n      const url = match[1];\n      if (!url.startsWith('data:') && !url.startsWith('blob:')) {\n        const absoluteUrl = HtmlParser.resolveUrl(url, baseUrl);\n        urls.push({ originalUrl: url, absoluteUrl });\n      }\n    }\n\n    // 预加载这些资源\n    if (urls.length > 0) {\n      const urlList = urls.map(u => u.absoluteUrl);\n      await ResourceCache.preloadResources(urlList);\n    }\n\n    // 替换URL引用为缓存的blob URL\n    let processedCSS = cssContent;\n    for (const urlInfo of urls) {\n      try {\n        const resource = await ResourceCache.fetchWithCache(urlInfo.absoluteUrl);\n        if (resource && resource.content) {\n          // 如果是blob URL，直接使用\n          const newUrl = resource.content.startsWith('blob:') ? resource.content : `data:${resource.contentType};base64,${btoa(resource.content)}`;\n          processedCSS = processedCSS.replace(\n            new RegExp(`url\\\\(\\\\s*[\"']?${urlInfo.originalUrl.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}[\"']?\\\\s*\\\\)`, 'g'),\n            `url(${newUrl})`\n          );\n        }\n      } catch (error) {\n        console.warn(`[SmartIframe] CSS资源处理失败: ${urlInfo.absoluteUrl}`, error);\n      }\n    }\n\n    return processedCSS;\n  }\n\n  /**\n   * 渲染HTML结构\n   * @param {Document} doc - 解析后的文档\n   */\n  renderHTML(doc) {\n    // 克隆body内容到shadow root\n    const body = doc.body;\n    if (body) {\n      // 创建一个容器div\n      const container = document.createElement('div');\n      container.innerHTML = body.innerHTML;\n      \n      // 处理所有图片的src属性\n      this.processImageElements(container);\n      \n      this.shadowRoot.appendChild(container);\n    }\n  }\n\n  /**\n   * 处理图片元素\n   * @param {Element} container - 容器元素\n   */\n  processImageElements(container) {\n    const images = container.querySelectorAll('img');\n    \n    images.forEach(async (img) => {\n      const src = img.getAttribute('src');\n      if (src && !src.startsWith('data:') && !src.startsWith('blob:')) {\n        try {\n          const absoluteUrl = HtmlParser.resolveUrl(src, this.baseUrl);\n          const resource = await ResourceCache.fetchWithCache(absoluteUrl);\n          \n          if (resource && resource.content) {\n            if (resource.content.startsWith('blob:')) {\n              img.src = resource.content;\n            } else {\n              // 转换为data URL\n              img.src = `data:${resource.contentType};base64,${btoa(resource.content)}`;\n            }\n          }\n        } catch (error) {\n          console.warn(`[SmartIframe] 图片加载失败: ${src}`, error);\n        }\n      }\n    });\n  }\n\n  /**\n   * 处理JavaScript脚本\n   * @param {Array} scripts - 脚本资源列表\n   */\n  async processScripts(scripts) {\n    if (!this.options.sandbox) {\n      console.warn('[SmartIframe] 脚本执行需要沙箱环境，跳过JavaScript处理');\n      return;\n    }\n\n    for (const script of scripts) {\n      try {\n        const jsResource = await ResourceCache.fetchWithCache(script.absoluteUrl);\n        \n        // 在沙箱环境中执行脚本\n        this.executeScriptInSandbox(jsResource.content, script.absoluteUrl);\n        \n      } catch (error) {\n        console.warn(`[SmartIframe] 脚本加载失败: ${script.absoluteUrl}`, error);\n      }\n    }\n  }\n\n  /**\n   * 在沙箱中执行脚本\n   * @param {string} scriptContent - 脚本内容\n   * @param {string} scriptUrl - 脚本URL\n   */\n  executeScriptInSandbox(scriptContent, scriptUrl) {\n    try {\n      // 创建一个受限的执行环境\n      const sandbox = {\n        console,\n        setTimeout,\n        setInterval,\n        clearTimeout,\n        clearInterval,\n        document: this.shadowRoot,\n        window: new Proxy({}, {\n          get: (target, prop) => {\n            // 只允许访问安全的属性\n            const allowedProps = ['console', 'setTimeout', 'setInterval', 'clearTimeout', 'clearInterval'];\n            if (allowedProps.includes(prop)) {\n              return sandbox[prop];\n            }\n            return undefined;\n          }\n        })\n      };\n\n      // 使用Function构造器创建沙箱环境\n      const func = new Function('sandbox', `\n        with(sandbox) {\n          ${scriptContent}\n        }\n      `);\n\n      func(sandbox);\n      \n    } catch (error) {\n      console.error(`[SmartIframe] 脚本执行失败: ${scriptUrl}`, error);\n    }\n  }\n\n  /**\n   * 处理图片资源\n   * @param {Array} images - 图片资源列表\n   */\n  processImages(images) {\n    // 图片处理已经在renderHTML中进行了\n    console.log(`[SmartIframe] 处理了 ${images.length} 个图片资源`);\n  }\n\n  /**\n   * 触发自定义事件\n   * @param {string} eventName - 事件名称\n   * @param {Object} detail - 事件详情\n   */\n  dispatchEvent(eventName, detail = {}) {\n    const event = new CustomEvent(`smartiframe:${eventName}`, {\n      detail,\n      bubbles: true,\n      cancelable: true\n    });\n    \n    this.container.dispatchEvent(event);\n  }\n\n  /**\n   * 销毁渲染器\n   */\n  destroy() {\n    if (this.shadowRoot) {\n      this.shadowRoot.innerHTML = '';\n    }\n    \n    this.resourceMap.clear();\n    this.isRendered = false;\n    \n    console.log('[SmartIframe] 渲染器已销毁');\n  }\n\n  /**\n   * 获取渲染统计信息\n   * @returns {Object} 统计信息\n   */\n  getStats() {\n    return {\n      isRendered: this.isRendered,\n      baseUrl: this.baseUrl,\n      resourceCount: this.resourceMap.size,\n      cacheStats: ResourceCache.getCacheStats()\n    };\n  }\n}\n\nexport default Renderer; ","import Renderer from './Renderer.js';\nimport ResourceCache from './ResourceCache.js';\n\n/**\n * SmartIframe - 智能iframe替代方案的核心组件\n */\nclass SmartIframe {\n  constructor(container, options = {}) {\n    this.container = this.resolveContainer(container);\n    this.options = {\n      width: '100%',\n      height: '400px',\n      sandbox: true,\n      loadImages: true,\n      loadScripts: false, // 默认关闭脚本执行，提高安全性\n      loadStyles: true,\n      cache: true,\n      ...options\n    };\n\n    this.src = '';\n    this.renderer = null;\n    this.isLoading = false;\n    this.isLoaded = false;\n    \n    this.init();\n  }\n\n  /**\n   * 解析容器元素\n   * @param {string|Element} container - 容器选择器或元素\n   * @returns {Element} 容器元素\n   */\n  resolveContainer(container) {\n    if (typeof container === 'string') {\n      const element = document.querySelector(container);\n      if (!element) {\n        throw new Error(`[SmartIframe] 找不到容器元素: ${container}`);\n      }\n      return element;\n    } else if (container instanceof Element) {\n      return container;\n    } else {\n      throw new Error('[SmartIframe] 无效的容器参数');\n    }\n  }\n\n  /**\n   * 初始化组件\n   */\n  init() {\n    this.setupContainer();\n    this.setupEventListeners();\n    this.renderer = new Renderer(this.container, this.options);\n  }\n\n  /**\n   * 设置容器样式\n   */\n  setupContainer() {\n    // 设置容器基础样式\n    Object.assign(this.container.style, {\n      width: this.options.width,\n      height: this.options.height,\n      border: 'none',\n      overflow: 'hidden',\n      display: 'block'\n    });\n\n    // 添加SmartIframe标识\n    this.container.setAttribute('data-smart-iframe', 'true');\n    this.container.classList.add('smart-iframe-container');\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  setupEventListeners() {\n    // 监听渲染事件\n    this.container.addEventListener('smartiframe:rendered', (e) => {\n      this.isLoading = false;\n      this.isLoaded = true;\n      this.dispatchEvent('load', e.detail);\n    });\n\n    // 监听错误事件\n    this.container.addEventListener('smartiframe:error', (e) => {\n      this.isLoading = false;\n      this.isLoaded = false;\n      this.dispatchEvent('error', e.detail);\n    });\n  }\n\n  /**\n   * 加载指定URL的内容\n   * @param {string} url - 要加载的URL\n   * @returns {Promise<void>}\n   */\n  async load(url) {\n    if (!url) {\n      throw new Error('[SmartIframe] URL不能为空');\n    }\n\n    if (this.isLoading) {\n      console.warn('[SmartIframe] 正在加载中，忽略新的加载请求');\n      return;\n    }\n\n    try {\n      this.isLoading = true;\n      this.isLoaded = false;\n      this.src = url;\n\n      // 显示加载状态\n      this.showLoadingState();\n\n      // 使用渲染器加载内容\n      await this.renderer.renderUrl(url);\n\n      // 隐藏加载状态\n      this.hideLoadingState();\n\n    } catch (error) {\n      this.hideLoadingState();\n      this.showErrorState(error);\n      throw error;\n    }\n  }\n\n  /**\n   * 显示加载状态\n   */\n  showLoadingState() {\n    this.container.innerHTML = `\n      <div class=\"smart-iframe-loading\" style=\"\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100%;\n        font-family: Arial, sans-serif;\n        color: #666;\n        background: #f5f5f5;\n      \">\n        <div style=\"text-align: center;\">\n          <div style=\"\n            width: 40px;\n            height: 40px;\n            border: 3px solid #e0e0e0;\n            border-top: 3px solid #007bff;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n            margin: 0 auto 10px;\n          \"></div>\n          <div>正在加载...</div>\n        </div>\n        <style>\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        </style>\n      </div>\n    `;\n  }\n\n  /**\n   * 隐藏加载状态\n   */\n  hideLoadingState() {\n    const loadingElement = this.container.querySelector('.smart-iframe-loading');\n    if (loadingElement) {\n      loadingElement.remove();\n    }\n  }\n\n  /**\n   * 显示错误状态\n   * @param {Error} error - 错误对象\n   */\n  showErrorState(error) {\n    this.container.innerHTML = `\n      <div class=\"smart-iframe-error\" style=\"\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100%;\n        font-family: Arial, sans-serif;\n        background: #fff;\n        border: 1px solid #ddd;\n      \">\n        <div style=\"text-align: center; color: #666; padding: 20px;\">\n          <div style=\"font-size: 48px; margin-bottom: 10px;\">⚠️</div>\n          <div style=\"font-size: 16px; margin-bottom: 10px;\">加载失败</div>\n          <div style=\"font-size: 14px; color: #999;\">${error.message}</div>\n          <button onclick=\"this.closest('.smart-iframe-container').smartIframe.reload()\" \n                  style=\"\n                    margin-top: 15px;\n                    padding: 8px 16px;\n                    background: #007bff;\n                    color: white;\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                  \">\n            重新加载\n          </button>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * 重新加载当前URL\n   * @returns {Promise<void>}\n   */\n  async reload() {\n    if (this.src) {\n      // 清除该URL的缓存\n      if (this.options.cache) {\n        ResourceCache.clearCache(this.src);\n      }\n      await this.load(this.src);\n    }\n  }\n\n  /**\n   * 设置src属性（类似iframe的src）\n   * @param {string} url - URL\n   */\n  set src(url) {\n    this._src = url;\n    if (url) {\n      this.load(url).catch(error => {\n        console.error('[SmartIframe] 自动加载失败:', error);\n      });\n    }\n  }\n\n  /**\n   * 获取src属性\n   * @returns {string} 当前的URL\n   */\n  get src() {\n    return this._src || '';\n  }\n\n  /**\n   * 设置宽度\n   * @param {string} width - 宽度值\n   */\n  set width(width) {\n    this.options.width = width;\n    this.container.style.width = width;\n  }\n\n  /**\n   * 获取宽度\n   * @returns {string} 当前宽度\n   */\n  get width() {\n    return this.options.width;\n  }\n\n  /**\n   * 设置高度\n   * @param {string} height - 高度值\n   */\n  set height(height) {\n    this.options.height = height;\n    this.container.style.height = height;\n  }\n\n  /**\n   * 获取高度\n   * @returns {string} 当前高度\n   */\n  get height() {\n    return this.options.height;\n  }\n\n  /**\n   * 获取加载状态\n   * @returns {boolean} 是否正在加载\n   */\n  get loading() {\n    return this.isLoading;\n  }\n\n  /**\n   * 获取加载完成状态\n   * @returns {boolean} 是否已加载完成\n   */\n  get loaded() {\n    return this.isLoaded;\n  }\n\n  /**\n   * 触发自定义事件\n   * @param {string} eventName - 事件名称\n   * @param {Object} detail - 事件详情\n   */\n  dispatchEvent(eventName, detail = {}) {\n    const event = new CustomEvent(eventName, {\n      detail,\n      bubbles: true,\n      cancelable: true\n    });\n    \n    this.container.dispatchEvent(event);\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy() {\n    if (this.renderer) {\n      this.renderer.destroy();\n      this.renderer = null;\n    }\n\n    // 清理容器内容，但保留Shadow DOM结构以便重用\n    if (this.container.shadowRoot) {\n      this.container.shadowRoot.innerHTML = '';\n    } else {\n      this.container.innerHTML = '';\n    }\n    \n    this.container.removeAttribute('data-smart-iframe');\n    this.container.classList.remove('smart-iframe-container');\n    \n    this.isLoading = false;\n    this.isLoaded = false;\n    this._src = '';\n\n    console.log('[SmartIframe] 组件已销毁');\n  }\n\n  /**\n   * 获取统计信息\n   * @returns {Object} 统计信息\n   */\n  getStats() {\n    return {\n      src: this.src,\n      loading: this.isLoading,\n      loaded: this.isLoaded,\n      renderer: this.renderer ? this.renderer.getStats() : null\n    };\n  }\n\n  /**\n   * 静态方法：创建SmartIframe实例\n   * @param {string|Element} container - 容器\n   * @param {Object} options - 选项\n   * @returns {SmartIframe} SmartIframe实例\n   */\n  static create(container, options = {}) {\n    return new SmartIframe(container, options);\n  }\n\n  /**\n   * 静态方法：获取缓存统计\n   * @returns {Object} 缓存统计信息\n   */\n  static getCacheStats() {\n    return ResourceCache.getCacheStats();\n  }\n\n  /**\n   * 静态方法：清除所有缓存\n   */\n  static clearAllCache() {\n    ResourceCache.clearCache();\n  }\n}\n\nexport default SmartIframe; ","import SmartIframe from '../core/SmartIframe.js';\n\n/**\n * SmartIframe Web Component\n * 使用方式：<smart-iframe src=\"https://example.com\" width=\"800\" height=\"600\"></smart-iframe>\n */\nclass SmartIframeElement extends HTMLElement {\n  constructor() {\n    super();\n    this.smartIframe = null;\n    this.isConnected = false;\n  }\n\n  /**\n   * 定义观察的属性\n   */\n  static get observedAttributes() {\n    return ['src', 'width', 'height', 'sandbox', 'load-images', 'load-scripts', 'load-styles'];\n  }\n\n  /**\n   * 元素连接到DOM时调用\n   */\n  connectedCallback() {\n    this.isConnected = true;\n    this.render();\n  }\n\n  /**\n   * 元素从DOM断开时调用\n   */\n  disconnectedCallback() {\n    this.isConnected = false;\n    if (this.smartIframe) {\n      this.smartIframe.destroy();\n      this.smartIframe = null;\n    }\n  }\n\n  /**\n   * 属性变化时调用\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!this.isConnected || oldValue === newValue) {\n      return;\n    }\n\n    switch (name) {\n      case 'src':\n        if (this.smartIframe && newValue) {\n          this.smartIframe.src = newValue;\n        }\n        break;\n      case 'width':\n        if (this.smartIframe && newValue) {\n          this.smartIframe.width = newValue;\n        }\n        break;\n      case 'height':\n        if (this.smartIframe && newValue) {\n          this.smartIframe.height = newValue;\n        }\n        break;\n      default:\n        // 其他属性变化时重新渲染\n        this.render();\n        break;\n    }\n  }\n\n  /**\n   * 渲染组件\n   */\n  render() {\n    if (this.smartIframe) {\n      this.smartIframe.destroy();\n    }\n\n    // 创建容器div\n    const container = document.createElement('div');\n    container.style.width = '100%';\n    container.style.height = '100%';\n    \n    this.innerHTML = '';\n    this.appendChild(container);\n\n    // 解析配置选项\n    const options = {\n      width: this.getAttribute('width') || '100%',\n      height: this.getAttribute('height') || '400px',\n      sandbox: this.getAttribute('sandbox') !== 'false',\n      loadImages: this.getAttribute('load-images') !== 'false',\n      loadScripts: this.getAttribute('load-scripts') === 'true',\n      loadStyles: this.getAttribute('load-styles') !== 'false'\n    };\n\n    // 创建SmartIframe实例\n    this.smartIframe = new SmartIframe(container, options);\n    \n    // 绑定到容器元素\n    container.smartIframe = this.smartIframe;\n\n    // 设置事件监听\n    this.setupEventListeners();\n\n    // 如果有src属性，立即加载\n    const src = this.getAttribute('src');\n    if (src) {\n      this.smartIframe.load(src).catch(error => {\n        console.error('[SmartIframeElement] 加载失败:', error);\n      });\n    }\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  setupEventListeners() {\n    const container = this.querySelector('div');\n    if (!container) return;\n\n    // 转发SmartIframe的事件\n    container.addEventListener('load', (e) => {\n      this.dispatchEvent(new CustomEvent('load', {\n        detail: e.detail,\n        bubbles: true\n      }));\n    });\n\n    container.addEventListener('error', (e) => {\n      this.dispatchEvent(new CustomEvent('error', {\n        detail: e.detail,\n        bubbles: true\n      }));\n    });\n  }\n\n  /**\n   * src属性的getter\n   */\n  get src() {\n    return this.getAttribute('src') || '';\n  }\n\n  /**\n   * src属性的setter\n   */\n  set src(value) {\n    if (value) {\n      this.setAttribute('src', value);\n    } else {\n      this.removeAttribute('src');\n    }\n  }\n\n  /**\n   * width属性的getter\n   */\n  get width() {\n    return this.getAttribute('width') || '100%';\n  }\n\n  /**\n   * width属性的setter\n   */\n  set width(value) {\n    if (value) {\n      this.setAttribute('width', value);\n    } else {\n      this.removeAttribute('width');\n    }\n  }\n\n  /**\n   * height属性的getter\n   */\n  get height() {\n    return this.getAttribute('height') || '400px';\n  }\n\n  /**\n   * height属性的setter\n   */\n  set height(value) {\n    if (value) {\n      this.setAttribute('height', value);\n    } else {\n      this.removeAttribute('height');\n    }\n  }\n\n  /**\n   * 获取加载状态\n   */\n  get loading() {\n    return this.smartIframe ? this.smartIframe.loading : false;\n  }\n\n  /**\n   * 获取加载完成状态\n   */\n  get loaded() {\n    return this.smartIframe ? this.smartIframe.loaded : false;\n  }\n\n  /**\n   * 重新加载\n   */\n  async reload() {\n    if (this.smartIframe) {\n      await this.smartIframe.reload();\n    }\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats() {\n    return this.smartIframe ? this.smartIframe.getStats() : null;\n  }\n}\n\n// 注册自定义元素\nif (!customElements.get('smart-iframe')) {\n  customElements.define('smart-iframe', SmartIframeElement);\n}\n\nexport default SmartIframeElement; ","/**\n * Smart-Iframe SDK\n * 智能iframe替代方案，解决资源重复加载问题\n * \n * 使用方式：\n * 1. ES6 模块：import SmartIframe from 'smart-iframe-sdk'\n * 2. CommonJS：const SmartIframe = require('smart-iframe-sdk')\n * 3. 全局变量：<script src=\"smart-iframe.min.js\"></script>\n * 4. Web Components：<smart-iframe src=\"https://example.com\"></smart-iframe>\n */\n\nimport SmartIframe from './core/SmartIframe.js';\nimport ResourceCache from './core/ResourceCache.js';\nimport Renderer from './core/Renderer.js';\nimport HtmlParser from './utils/htmlParser.js';\nimport SmartIframeElement from './web-components/SmartIframeElement.js';\n\n/**\n * 版本信息\n */\nconst VERSION = '1.0.0';\n\n/**\n * 快速创建SmartIframe实例的工厂函数\n * @param {string|Element} container - 容器选择器或元素\n * @param {Object} options - 配置选项\n * @returns {SmartIframe} SmartIframe实例\n */\nfunction create(container, options = {}) {\n  return new SmartIframe(container, options);\n}\n\n/**\n * 快速加载网页到指定容器\n * @param {string|Element} container - 容器选择器或元素\n * @param {string} url - 要加载的URL\n * @param {Object} options - 配置选项\n * @returns {Promise<SmartIframe>} SmartIframe实例\n */\nasync function load(container, url, options = {}) {\n  const iframe = new SmartIframe(container, options);\n  await iframe.load(url);\n  return iframe;\n}\n\n/**\n * 注册自定义元素到全局\n * 调用后可以在HTML中使用 <smart-iframe> 标签\n */\nfunction registerWebComponent() {\n  if (typeof window !== 'undefined' && window.customElements) {\n    // SmartIframeElement 会自动注册，这里只是确保\n    console.log('[SmartIframe] Web Component 已注册');\n  } else {\n    console.warn('[SmartIframe] 当前环境不支持 Web Components');\n  }\n}\n\n/**\n * 获取SDK信息\n * @returns {Object} SDK信息\n */\nfunction getInfo() {\n  return {\n    name: 'smart-iframe-sdk',\n    version: VERSION,\n    description: '智能iframe替代方案，解决资源重复加载问题',\n    author: 'Smart-Iframe Team',\n    license: 'MIT',\n    cacheStats: ResourceCache.getCacheStats()\n  };\n}\n\n/**\n * 清除所有缓存\n */\nfunction clearCache() {\n  ResourceCache.clearCache();\n  console.log('[SmartIframe] 已清除所有缓存');\n}\n\n/**\n * 设置全局配置\n * @param {Object} config - 全局配置\n */\nfunction setGlobalConfig(config = {}) {\n  if (config.maxCacheSize) {\n    ResourceCache.maxCacheSize = config.maxCacheSize;\n  }\n  \n  if (config.maxAge) {\n    ResourceCache.maxAge = config.maxAge;\n  }\n  \n  console.log('[SmartIframe] 全局配置已更新:', config);\n}\n\n/**\n * 批量预加载URL列表\n * @param {Array<string>} urls - URL列表\n * @returns {Promise<Array>} 预加载结果\n */\nasync function preload(urls) {\n  if (!Array.isArray(urls)) {\n    throw new Error('[SmartIframe] preload 参数必须是数组');\n  }\n  \n  console.log(`[SmartIframe] 开始批量预加载 ${urls.length} 个URL`);\n  return await ResourceCache.preloadResources(urls);\n}\n\n/**\n * 检查浏览器兼容性\n * @returns {Object} 兼容性检查结果\n */\nfunction checkCompatibility() {\n  const isSupported = {\n    shadowDOM: !!Element.prototype.attachShadow,\n    webComponents: typeof customElements !== 'undefined',\n    fetch: typeof fetch !== 'undefined',\n    proxy: typeof Proxy !== 'undefined',\n    asyncAwait: true, // 如果代码能执行到这里就支持\n    es6Classes: true,  // 如果代码能执行到这里就支持\n    es6Modules: true   // 简化检测，如果能导入就支持\n  };\n  \n  const allSupported = Object.values(isSupported).every(Boolean);\n  \n  return {\n    supported: allSupported,\n    features: isSupported,\n    recommendation: allSupported \n      ? '✅ 浏览器完全兼容SmartIframe SDK' \n      : '⚠️ 部分功能可能不可用，建议使用现代浏览器'\n  };\n}\n\n// 默认导出主类\nexport default SmartIframe;\n\n// 命名导出所有API\nexport {\n  SmartIframe,\n  ResourceCache,\n  Renderer,\n  HtmlParser,\n  SmartIframeElement,\n  VERSION,\n  create,\n  load,\n  registerWebComponent,\n  getInfo,\n  clearCache,\n  setGlobalConfig,\n  preload,\n  checkCompatibility\n};\n\n// 如果在浏览器环境中，自动注册到全局\nif (typeof window !== 'undefined') {\n  // 注册到全局对象\n  window.SmartIframe = SmartIframe;\n  window.SmartIframeSDK = {\n    SmartIframe,\n    create,\n    load,\n    registerWebComponent,\n    getInfo,\n    clearCache,\n    setGlobalConfig,\n    preload,\n    checkCompatibility,\n    version: VERSION\n  };\n  \n  // 自动注册Web Component\n  registerWebComponent();\n  \n  console.log(`[SmartIframe] SDK v${VERSION} 已加载`);\n  console.log('[SmartIframe] 兼容性检查:', checkCompatibility());\n}\n\n// 如果是CommonJS环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = SmartIframe;\n  module.exports.default = SmartIframe;\n  module.exports.create = create;\n  module.exports.load = load;\n  module.exports.getInfo = getInfo;\n  module.exports.clearCache = clearCache;\n  module.exports.setGlobalConfig = setGlobalConfig;\n  module.exports.preload = preload;\n  module.exports.checkCompatibility = checkCompatibility;\n  module.exports.version = VERSION;\n} "],"names":["ResourceCache","_createClass","_classCallCheck","key","value","_fetchWithCache","_asyncToGenerator","_regenerator","m","_callee","url","options","normalizedUrl","cached","requestPromise","result","_t","_args","arguments","w","_context","n","length","undefined","this","normalizeUrl","cache","has","get","Date","now","timestamp","maxAge","a","delete","pendingRequests","v","performRequest","set","p","addToCache","_x","apply","_performRequest","_callee2","response","contentType","content","blob","_context2","fetch","_objectSpread","mode","ok","Error","concat","status","statusText","headers","includes","text","URL","createObjectURL","size","_x2","_x3","urlObj","window","location","href","hash","toString","error","data","maxCacheSize","oldestKey","keys","next","clear","totalSize","Array","from","values","reduce","sum","item","count","maxSize","_preloadResources","_callee3","urls","promises","results","_this","_context3","map","fetchWithCache","catch","Promise","all","filter","r","_x4","_defineProperty","Map","HtmlParser","html","baseUrl","doc","DOMParser","parseFromString","resources","stylesheets","scripts","images","links","other","extractStylesheets","extractScripts","extractImages","extractOtherLinks","extractInlineStyleUrls","document","allUrls","getAllUrls","querySelectorAll","forEach","link","getAttribute","absoluteUrl","resolveUrl","push","element","originalUrl","type","style","importMatches","textContent","match","urlMatch","parentStyle","_this2","script","src","async","hasAttribute","defer","module","_this3","img","srcset","parseSrcset","el","extractBackgroundUrls","_this4","rel","tagName","toLowerCase","_this5","extractUrlsFromCSS","cssContent","urlRegex","exec","styleContent","_this6","split","entry","parts","trim","startsWith","base","Object","resourceList","resource","resourceMap","_this7","setAttribute","replace","newUrl","documentElement","outerHTML","Renderer","container","sandbox","loadImages","loadScripts","loadStyles","shadowRoot","isRendered","_renderUrl","htmlResource","parsed","parseHTML","preloadResources","createShadowRoot","processStyles","renderHTML","processScripts","processImages","dispatchEvent","innerHTML","attachShadow","delegatesFocus","resetStyle","createElement","appendChild","filteredUrls","_processStyles","_iterator","_step","stylesheet","cssResource","processedCSS","_cssResource","_processedCSS","_t3","_createForOfIteratorHelper","s","done","processCSSContent","RegExp","e","f","_processCSSContent","_callee4","urlList","_i","_urls","urlInfo","_context4","u","btoa","_x5","body","processImageElements","_ref","_callee5","_context5","_x6","_processScripts","_callee6","_iterator2","_step2","jsResource","_t7","_context6","executeScriptInSandbox","_x7","scriptContent","scriptUrl","console","setTimeout","setInterval","clearTimeout","clearInterval","Proxy","target","prop","Function","func","eventName","detail","event","CustomEvent","bubbles","cancelable","resourceCount","cacheStats","getCacheStats","SmartIframe","resolveContainer","width","height","renderer","isLoading","isLoaded","init","querySelector","Element","setupContainer","setupEventListeners","assign","border","overflow","display","classList","add","addEventListener","_load","showLoadingState","renderUrl","hideLoadingState","showErrorState","loadingElement","remove","message","_reload","clearCache","load","_src","destroy","removeAttribute","loading","loaded","getStats","SmartIframeElement","_HTMLElement","_callSuper","smartIframe","isConnected","_inherits","render","name","oldValue","newValue","reload","_wrapNativeSuper","HTMLElement","customElements","define","VERSION","create","iframe","registerWebComponent","getInfo","version","description","author","license","setGlobalConfig","config","preload","_preload","isArray","checkCompatibility","isSupported","shadowDOM","prototype","webComponents","proxy","asyncAwait","es6Classes","es6Modules","allSupported","every","Boolean","supported","features","recommendation","SmartIframeSDK","exports","default"],"mappings":"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"}